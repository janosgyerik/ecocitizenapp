package com.senspodapp.framework;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.StreamCorruptedException;
import java.util.Date;

import com.senspodapp.data.AndroidGpsInfo;
import com.senspodapp.data.Co2Data;
import com.senspodapp.data.GpsInfo;
import com.senspodapp.data.SensorData;
import com.senspodapp.data.SensorDataType;
import com.senspodapp.data.SensorInfo;

/**
 * A class that encapsulates a sensor data measurement,
 * able to serialize/deserialize itself from/to a byte array.
 * 
 * @author janosgyerik
 *
 */
public class SensorDataBundle {
	/**
	 * The device that generated the measurement.
	 */
	SensorInfo sensorInfo = null;
	
	/**
	 * The timestamp of the measurement.
	 */
	Date timestamp = null;

	/**
	 * The GPS location of the measurement. (optional)
	 */
	GpsInfo gpsInfo = null;
	
	/**
	 * The SensorData encapsulating the measurement.
	 */
	SensorData sensorData = null;
	
	/**
	 * Create SensorDataBundle from all necessary components.
	 * 
	 * @param sentence
	 */
	public SensorDataBundle(SensorInfo sensorInfo, Date timestamp, GpsInfo gpsInfo, String sentence) {
		this.sensorInfo = sensorInfo;
		this.timestamp = timestamp;
		this.gpsInfo = gpsInfo;
		this.sensorData = createSensorDataFromSentenceString(sentence);
	}
	
	/**
	 * Reconstruct SentenceMessage using ObjectInputStream,
	 * from a byte array generated by toByteArray() at the sender.
	 *
	 * @param bytes
	 */
	public SensorDataBundle(byte[] bytes) {
		ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
		try {
			ObjectInputStream ois = new ObjectInputStream(bais);
			sensorInfo = (SensorInfo)ois.readObject();
			timestamp = (Date)ois.readObject();
			
			SensorDataType gpsInfoType = (SensorDataType)ois.readObject();
			switch (gpsInfoType) {
			case AndroidGpsInfo:
				gpsInfo = (AndroidGpsInfo)ois.readObject();
				break;
			case Null:
				gpsInfo = null;
				break;
			default:
				gpsInfo = (GpsInfo)ois.readObject();
				break;
			}
			
			SensorDataType sensorDataType = (SensorDataType)ois.readObject();
			switch (sensorDataType) {
			case Co2Data:
				sensorData = (Co2Data)ois.readObject();
				break;
			case Null:
				gpsInfo = null;
				break;
			default:
				sensorData = (SensorData)ois.readObject();
				break;
			}
		} catch (StreamCorruptedException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Serialize EnvDataMessage into a byte array using ObjectOutputStream.
	 * 
	 * @return Serialized EnvDataMessage as byte[], or null on error.
	 */
	public byte[] toByteArray() {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		try {
			ObjectOutputStream oos = new ObjectOutputStream(baos);
			oos.writeObject(sensorInfo);
			oos.writeObject(timestamp);
			if (gpsInfo == null) {
				oos.writeObject(SensorDataType.Null);
			}
			else {
				oos.writeObject(gpsInfo.getType());
				oos.writeObject(gpsInfo);
			}
			if (sensorData == null) {
				oos.writeObject(SensorDataType.Null);
			}
			else {
				oos.writeObject(sensorData.getType());
				oos.writeObject(sensorData);
			}
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
		return baos.toByteArray();
	}
	
	public static SensorData createSensorDataFromSentenceString(String str) {
		if (str.matches(Co2Data.sentencePattern)) {
			return new Co2Data(str);
		}
		return null;
	}

}